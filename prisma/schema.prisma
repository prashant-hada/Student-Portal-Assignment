// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Student{
  id  String @id @default(uuid())
  email String @unique
  firstName String @map("first_name")
  middleName String @map("middle_name")
  lastName String @map("last_name")
  mobileNo String @map("mobile_no")
  emergencyNo String @map("emergency_no")
  maritalStatus MaritalStatus @default(SINGLE)
  gender Gender @default(OTHER)
  dob DateTime
  passportNo String? @map("passport_no")
  passportExpiryDate String? @map("passport_expiry_date")
  educationGap EducationGap?

//relations
  address Address? //One to one (for Now)
  academicInfo AcademicInfo? //One to one (for Now)
  educationInfo Education[] //one to many 
  applicationInfo ApplicationStatus?
}
model Address{
  id String @id @default(uuid())
  student Student @relation(fields: [studentId], references: [id])
  studentId String @unique
  country Country 
  pincode String
}


// We can create another table for specifically for passport Info considering
// a student can have more than one passport(in case one is about to expire and he accquired a new one)
// but for now I'm ignoring that possibility
//
// model PassportInfo{
//   id String @id @default(uuid())
//   passportNo String? @map("passport_no")
//   passportExpiryDate String? @map("passport_expiry_date")
//   student Student @relation(fields: [studentId], references: [id])
//   studentId String 
// }

model AcademicInfo {
  id String   @id @default(uuid())
  interestedCountry Country
  englishTest EnglishTest  
  testScore Int 
  student Student  @relation(fields: [studentId], references: [id])
  studentId String @unique
}

model Education{
  id String @id @default(uuid())
  qualification String
  institution String
  percentage String
  passingYear DateTime @map("passing_year")
  country Country

  //relation
  student Student @relation(fields: [studentId],references: [id])
  studentId String
}

model ApplicationStatus{
  id String @id @default(uuid())
  visaRejectionStatus Boolean
  //relation
  student Student @relation(fields: [studentId],references: [id])
  studentId String @unique
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOW
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Country {
  INDIA
  USA
  CANADA
  UK
  AUSTRALIA
}

enum EnglishTest {
  IELTS
  TOEFL
  PTE
  DUOLINGO
  OTHER 
}

enum EducationGap {
  NONE
  LESS_THAN_A_YEAR 
  ONE_TO_TWO_YEARS 
  MORE_THAN_TWO_YEARS 
}